{"version":3,"sources":["components/ControlBar/ControlButton.jsx","components/ControlBar/ControlSlider.jsx","components/ControlBar/ControlBar.jsx","hooks/useCanvas.js","components/Canvas/Canvas.jsx","graph/Vertex.js","graph/RandomEulerGraph.js","components/Canvas/DrawElements.js","components/Canvas/DrawLogic.js","App.js","index.js"],"names":["ControlButton","props","className","onClick","clickFunc","name","ControlSlider","useState","value","setValue","type","min","max","onChange","e","target","onNumVertChange","ControlBar","genGraphFunc","softReset","openHelp","canvasWidth","window","innerWidth","canvasHeight","innerHeight","frameCount","then","Date","now","useCanvas","draw","getGraphData","setSuccess","canvasRef","useRef","useEffect","animationFrameId","canvas","current","context","getContext","width","height","render","elapsed","vertexList","edgeList","mouseXy","clickXy","requestAnimationFrame","cancelAnimationFrame","Canvas","graphData","ref","Vertex","id","this","_id","_xy","xy","genRandom","minimum","maximum","Math","floor","random","genDegreeSequence","totalNumber","hasOddNumbers","oddNumber","oddCounter","sequence","i","degree","ceil","push","generateEdges","degreeSequence","vertices","counter","length","remainingConnections","sort","a","b","edges","x","y","start","end","currentState","sum","reduce","checkDistance","pointA","pointB","sqrt","pow","abs","RandomEulerGraph","numberOfVertices","canvasSize","odd","Array","keys","map","z","size","history","coordinates","tooClose","j","generateCoords","defaultVertex","ctx","fillStyle","arc","PI","fill","beginPath","activeVertex","angle","pastVertex","hoverVertex","sin","possibleVertex","defaultEdge","edge","moveTo","lineTo","strokeStyle","lineWidth","stroke","possibleEdge","pastEdge","currentActive","vertexHistory","listOfPossibleVertecies","hasStarted","hasWon","resetGraphStatus","checkEdgePosibilties","currentVertex","clearRect","fillRect","totalUsedEdges","targetX","targetY","Object","forEach","key","Modal","setAppElement","canceledWin","numberOfVertecies","handleNumVertChange","val","parseInt","genGraph","softResetGraph","App","helpIsOpen","setHelpIsOpen","successIsOpen","setSuccessIsOpen","overlayClassName","isOpen","onRequestClose","onMouseMove","clientX","clientY","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e6ad7be.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ControlButton.css'\r\n\r\nconst ControlButton = (props) => {\r\n    return (\r\n        <button className=\"controlButton\" onClick={props.clickFunc}>\r\n            {props.name}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ControlButton;","import React, {useState} from 'react';\r\nimport './ControlSlider.css'\r\n\r\nconst ControlSlider = (props) => {\r\n    const [value, setValue] = useState(5);\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n        props.onNumVertChange(e.target.value);\r\n    }\r\n    return (\r\n        <div className=\"controlSlider_main\">\r\n            <div className=\"sliderText\">Points: {value}</div>\r\n            <div className=\"sliderDiv\">\r\n                <input type=\"range\" min=\"4\" max=\"20\" value={value} className=\"slider\" onChange={handleChange} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ControlSlider;","import React from 'react';\r\nimport './ControlBar.css'\r\nimport ControlButton from './ControlButton'\r\nimport ControlSlider from './ControlSlider'\r\n\r\nconst ControlBar = (props) => {\r\n    return (\r\n        <header className=\"controlBar\">\r\n            <nav className=\"controlBar_nav\">\r\n                <ControlSlider onNumVertChange={props.onNumVertChange}/>\r\n                <ControlButton name=\"New\" clickFunc={props.genGraphFunc}/>\r\n                <ControlButton name=\"Reset\" clickFunc={props.softReset}/>\r\n                <ControlButton name=\"Help\" clickFunc={props.openHelp}/>\r\n                <ControlButton name=\"Settings\"/>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default ControlBar;","import { useRef, useEffect } from 'react'\r\n\r\nexport const canvasWidth = window.innerWidth - 30;\r\nexport const canvasHeight = window.innerHeight - 75;\r\n\r\nlet frameCount = 0;\r\nconst FPS_INTERVAL = 1000 / 60; //60FPS cap\r\nlet then = Date.now()\r\n\r\nconst useCanvas = (draw, getGraphData, setSuccess) => {\r\n\r\n\tconst canvasRef = useRef(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst canvas = canvasRef.current;\r\n\t\tconst context = canvas.getContext('2d');\r\n\t\tlet animationFrameId;\r\n\t\tcanvas.width = window.innerWidth - 30;\r\n\t\tcanvas.height = window.innerHeight - 75;\r\n\r\n\t\tconst render = () => {\r\n\t\t\tconst now = Date.now();\r\n\t\t\tconst elapsed = now - then;\r\n\t\t\tif (elapsed > FPS_INTERVAL) {\r\n\t\t\t\tthen = now - (elapsed % FPS_INTERVAL);\r\n\t\t\t\tframeCount++;\r\n\t\t\t\tlet { vertexList, edgeList, mouseXy, clickXy } = getGraphData();\r\n\t\t\t\tif (draw(context, frameCount, vertexList, edgeList, mouseXy, clickXy)) { setSuccess() }\r\n\t\t\t}\r\n\t\t\tanimationFrameId = window.requestAnimationFrame(render);\r\n\t\t}\r\n\t\trender()\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\r\n\t\t}\r\n\t}, [draw, getGraphData, setSuccess])\r\n\r\n\treturn [canvasRef];\r\n}\r\n\r\nexport default useCanvas;","import React from 'react';\r\nimport useCanvas, { canvasHeight, canvasWidth } from '../../hooks/useCanvas';\r\n\r\nconst Canvas = (props) => {\r\n    const { draw, graphData, setSuccess } = props;\r\n    const [canvasRef] = useCanvas(draw, graphData, setSuccess);\r\n\r\n    return (<canvas ref={canvasRef} />);\r\n};\r\n\r\nexport const getWindow = () => {\r\n    return [canvasWidth, canvasHeight];\r\n};\r\n\r\nexport default Canvas;","export default class Vertex {\r\n    constructor(id) {\r\n        this._id = id;\r\n        this._xy = [0,0];\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get xy() {\r\n        return this._xy;\r\n    }\r\n    \r\n    /** @param {number[]} xy */\r\n    set xy(xy) {\r\n        this._xy = xy;\r\n    }\r\n}","import Vertex from './Vertex';\r\n\r\n// Generate random number between min and max, inclusive\r\nconst genRandom = (minimum, maximum) => {\r\n    return minimum + (Math.floor(Math.random()*(maximum-minimum+1)));\r\n}\r\n\r\n// Generate sequence of degrees that conform to Euler's Path\r\nconst genDegreeSequence = (totalNumber, hasOddNumbers) => {\r\n    let oddNumber = null;\r\n    let oddCounter = 0;\r\n    if (hasOddNumbers === true) {\r\n        oddNumber = (genRandom(1, Math.floor(totalNumber / 2) - 1) * 2) + 1;\r\n        oddCounter = 2;\r\n    }\r\n    let sequence = [];\r\n    for (let i = 0; i < totalNumber; i++) {\r\n        let degree = 0;\r\n        if (oddCounter > 0) {\r\n            degree = oddNumber;\r\n            oddCounter--;\r\n        }\r\n        else {\r\n            degree = (genRandom(1, Math.ceil(totalNumber / 2) - 1) * 2);\r\n        }\r\n        sequence.push(degree);\r\n    }\r\n    return sequence;\r\n}\r\n\r\n// Generate edges in pairs {start: V1, end: V2}\r\nconst generateEdges = (degreeSequence, vertices) => {\r\n    const counter = [];\r\n    for (let i = 0; i<degreeSequence.length; i++) {\r\n        counter.push({id: i, remainingConnections: degreeSequence[i]});\r\n    }\r\n    counter.sort((a, b) => { return b.remainingConnections - a.remainingConnections });\r\n\r\n    let edges = [];\r\n    for (let x = 0; x < counter.length; x++) {\r\n        for (let y = counter[0].remainingConnections; y>0; y--) {\r\n            counter[y].remainingConnections--;\r\n            edges.push({ start: vertices[counter[0].id], end: vertices[counter[y].id], currentState: 0 });\r\n        }\r\n        counter[0].remainingConnections = 0;\r\n        counter.sort((a, b) => { return b.remainingConnections - a.remainingConnections });\r\n    }\r\n\r\n    const sum = degreeSequence.reduce((a, b) => a + b, 0);\r\n    if (edges.length !== sum/2 || counter[counter.length-1] < 0) { \r\n        edges = [-1];\r\n    }\r\n    return edges;\r\n}\r\n\r\nexport const checkDistance = (pointA, pointB) => {\r\n    return Math.sqrt(Math.pow(Math.abs(pointA[0]-pointB[0]), 2) + Math.pow(Math.abs(pointA[1]-pointB[1]), 2));\r\n};\r\n\r\n// Generates integer coordinates [x, y] for each vertex in vertices\r\nconst generateCoords = (vertices, size) => {\r\n    let history = [];\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        let coordinates = null;\r\n        while (true) {\r\n            coordinates = [genRandom(0, size[0]-45), genRandom(0, size[1]-40)];\r\n            let tooClose = false;\r\n            for (let j = 0; j<history.length; j++) {\r\n                let distance = checkDistance(coordinates, history[j])\r\n                if (distance < 50) { tooClose = true }\r\n            }\r\n            if (tooClose === false) { \r\n                history.push(coordinates);\r\n                break;\r\n            }\r\n        }\r\n        vertices[i].xy = coordinates;\r\n    }\r\n}\r\n\r\n// Overall function, generates entire graph.\r\n// Returns set of vertices V, and set of edges E => [V, E]\r\nconst RandomEulerGraph = (numberOfVertices, canvasSize) => {\r\n    const odd = Math.random() >= 0.5;\r\n    const vertexList = [...Array(numberOfVertices).keys()].map(z => new Vertex(z));\r\n    let degreeSequence = null;\r\n    let edgeList = [-1];\r\n    while (edgeList[0] === -1) {\r\n        degreeSequence = genDegreeSequence(numberOfVertices, odd).sort((a, b) => { return b - a });\r\n        edgeList = generateEdges(degreeSequence, vertexList);\r\n    }\r\n    generateCoords(vertexList, canvasSize);\r\n    return [vertexList, edgeList];\r\n}\r\n\r\nexport default RandomEulerGraph;","// Draw functions for all possible vertex states\r\nexport const defaultVertex = (ctx, x, y) => {\r\n    ctx.fillStyle = '#2b2b2b'\r\n    ctx.arc(x, y, 12, 0, 2*Math.PI);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.fillStyle = '#000000'\r\n    ctx.arc(x, y, 10, 0, 2*Math.PI);\r\n    ctx.fill()\r\n}\r\n\r\nexport const activeVertex = (ctx, x, y, frameCount) => {\r\n    ctx.fillStyle = '#f7e9c8';\r\n    let angle = (2*Math.PI/180)*(frameCount%180);\r\n    ctx.arc(x, y, 12, angle, angle+Math.PI);\r\n    ctx.fill()\r\n    ctx.beginPath()\r\n    ctx.fillStyle = '#ffa500';\r\n    ctx.arc(x, y, 10, 0, 2 * Math.PI);\r\n    ctx.fill()\r\n}\r\n\r\nexport const pastVertex = (ctx, x, y) => {\r\n    ctx.fillStyle = '#f7e9c8'\r\n    ctx.arc(x, y, 11, 0, 2*Math.PI);\r\n    ctx.fill()\r\n    ctx.beginPath()\r\n    ctx.fillStyle = '#0ccef5'\r\n    ctx.arc(x, y, 10, 0, 2*Math.PI);\r\n    ctx.fill()\r\n}\r\n\r\nexport const hoverVertex = (ctx, x, y, frameCount) => {\r\n    ctx.fillStyle = '#f7e9c8'\r\n    ctx.arc(x, y, 10+Math.sin(frameCount*0.085)**2, 0, 2*Math.PI);\r\n    ctx.fill()\r\n}\r\n\r\nexport const possibleVertex = (ctx, x, y, frameCount) => {\r\n    ctx.fillStyle = '#faeb48'\r\n    ctx.arc(x, y, 10+Math.sin(frameCount*0.05)**2, 0, 2*Math.PI);\r\n    ctx.fill()\r\n}\r\n\r\n// Draw functions for all possible edge states\r\nexport const defaultEdge = (ctx, edge) => {\r\n    ctx.beginPath()\r\n    ctx.moveTo(edge.start.xy[0]+15, edge.start.xy[1]+15)\r\n    ctx.lineTo(edge.end.xy[0]+15, edge.end.xy[1]+15)\r\n    ctx.strokeStyle = '#080808';\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n}\r\n\r\nexport const possibleEdge = (ctx, edge) => {\r\n    ctx.beginPath()\r\n    ctx.moveTo(edge.start.xy[0]+15, edge.start.xy[1]+15)\r\n    ctx.lineTo(edge.end.xy[0]+15, edge.end.xy[1]+15)\r\n    ctx.strokeStyle = '#d4a20d';\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n}\r\n\r\nexport const pastEdge = (ctx, edge) => {\r\n    ctx.beginPath()\r\n    ctx.moveTo(edge.start.xy[0]+15, edge.start.xy[1]+15)\r\n    ctx.lineTo(edge.end.xy[0]+15, edge.end.xy[1]+15)\r\n    ctx.strokeStyle = '#006187';\r\n    ctx.lineWidth = 3;\r\n    ctx.stroke();\r\n    ctx.beginPath()\r\n    ctx.moveTo(edge.start.xy[0]+15, edge.start.xy[1]+15)\r\n    ctx.lineTo(edge.end.xy[0]+15, edge.end.xy[1]+15)\r\n    ctx.strokeStyle = '#09a3e0';\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n}","import {checkDistance} from '../../graph/RandomEulerGraph';\r\nimport {defaultVertex, hoverVertex, pastVertex, activeVertex, possibleVertex, defaultEdge, possibleEdge, pastEdge} from './DrawElements';\r\n\r\nlet currentActive = null;\r\nlet vertexHistory = {};\r\nlet listOfPossibleVertecies = {}; // Each Obj = {Vertex.id: x, Edge: y}\r\nlet hasStarted = false;\r\nlet hasWon = false;\r\n\r\n\r\nexport const resetGraphStatus = () => {\r\n    currentActive = null;\r\n    vertexHistory = {};\r\n    listOfPossibleVertecies = {};\r\n    hasStarted = false;\r\n    hasWon = false;\r\n};\r\n\r\nconst checkEdgePosibilties = (currentVertex, edgeList) => {\r\n    // Loop through vertex list\r\n    listOfPossibleVertecies = {};\r\n    for (let i = 0; i<edgeList.length; i++) {\r\n        if (edgeList[i].start === currentVertex) { \r\n            if (edgeList[i].currentState === 0) {\r\n                listOfPossibleVertecies[edgeList[i].end.id] = edgeList[i];\r\n                edgeList[i].currentState = 1;\r\n            }\r\n        }\r\n        if (edgeList[i].end === currentVertex) {\r\n            if (edgeList[i].currentState === 0) {\r\n                listOfPossibleVertecies[edgeList[i].start.id] = edgeList[i];\r\n                edgeList[i].currentState = 1;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const draw = (ctx, frameCount, vertexList, edgeList, mouseXy, clickXy) => {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = '#141414';\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    // Draws edges\r\n    let totalUsedEdges = 0;\r\n    for (let i = 0; i<edgeList.length; i++) {\r\n        switch(edgeList[i].currentState) {\r\n            case 1:\r\n                possibleEdge(ctx, edgeList[i]);\r\n                break;\r\n            case 2:\r\n                totalUsedEdges++;\r\n                pastEdge(ctx, edgeList[i]);\r\n                break;\r\n            case 0:\r\n                defaultEdge(ctx, edgeList[i]);\r\n                break;\r\n            default:\r\n                defaultEdge(ctx, edgeList[i]);\r\n        }\r\n    }\r\n    if (totalUsedEdges === edgeList.length) {\r\n        hasWon = true;\r\n    }\r\n\r\n    // Draws vertices\r\n    for (let i = 0; i<vertexList.length; i++) {\r\n        ctx.beginPath()\r\n        const targetX = vertexList[i].xy[0]+15;\r\n        const targetY = vertexList[i].xy[1]+15;\r\n        // If vertex is currently active\r\n        if (vertexList[i] === currentActive) {\r\n            activeVertex(ctx, targetX, targetY, frameCount);\r\n        }\r\n        // If vertex will become currently active\r\n        else if (checkDistance([targetX, targetY], [clickXy[0], clickXy[1]]) <= 13 && (listOfPossibleVertecies[vertexList[i].id] || !hasStarted)) {\r\n            // eslint-disable-next-line\r\n            Object.keys(listOfPossibleVertecies).forEach((key) => {\r\n                listOfPossibleVertecies[key].currentState = 0;\r\n            });\r\n            if (listOfPossibleVertecies[vertexList[i].id]) { listOfPossibleVertecies[vertexList[i].id].currentState = 2; }\r\n            listOfPossibleVertecies = {};\r\n            currentActive = vertexList[i];\r\n            vertexHistory[[targetX, targetY]] = true;\r\n            activeVertex(ctx, targetX, targetY, frameCount);\r\n            checkEdgePosibilties(vertexList[i], edgeList);\r\n            if (!hasStarted) { hasStarted = true }\r\n        }\r\n        // If mouse hovering over vertex\r\n        else if (checkDistance([targetX, targetY], [mouseXy[0], mouseXy[1]]) <= 13) {\r\n            hoverVertex(ctx, targetX, targetY, frameCount);\r\n        }\r\n        // If the vertex is a valid selection from current active\r\n        else if (listOfPossibleVertecies[vertexList[i].id] || !hasStarted) {\r\n            possibleVertex(ctx,targetX, targetY, frameCount);\r\n        }\r\n        // If vertex has been activated\r\n        else if (vertexHistory[[targetX, targetY]]) {\r\n            pastVertex(ctx, targetX, targetY);\r\n        }\r\n        // Otherwise vertex untouched\r\n        else {\r\n            defaultVertex(ctx, targetX, targetY);\r\n        }\r\n    }\r\n    if (hasWon) { return true }\r\n};","import React, {useState} from 'react';\nimport \"./App.css\";\nimport ControlBar from './components/ControlBar/ControlBar';\nimport Canvas, {getWindow} from './components/Canvas/Canvas';\nimport RandomEulerGraph from './graph/RandomEulerGraph';\nimport {draw, resetGraphStatus} from './components/Canvas/DrawLogic';\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\nlet canceledWin = false;\n\nlet numberOfVertecies = 5;\nconst handleNumVertChange = (val) => {\n\tnumberOfVertecies = parseInt(val, 10);\n}\n\nlet vertexList, edgeList;\nconst genGraph = () => {\n\t[vertexList, edgeList] = RandomEulerGraph(numberOfVertecies, getWindow());\n\tresetGraphStatus();\n\tcanceledWin = false;\n};\ngenGraph();\n\nconst softResetGraph = () => {\n\tresetGraphStatus();\n\tfor (let i=0; i<edgeList.length; i++) {\n\t\tedgeList[i].currentState = 0;\n\t}\n\tmouseXy = [0, 0];\n\tclickXy = [0, 0]; \n}\n\nlet mouseXy = [0, 0];\nlet clickXy = [0, 0]; \nconst App = () => {\n\tconst getMouseCoords = (e) => {\n\t\tmouseXy = [e.clientX-20, e.clientY-65];\n\t}\n\tconst getCoordsOnClick = (e) => {\n\t\tclickXy = [e.clientX-20, e.clientY-65];\n\t}\n\tconst getGraphData = () => {\n\t\treturn {vertexList, edgeList, mouseXy, clickXy};\n\t};\n\n\tconst [helpIsOpen, setHelpIsOpen] = useState(false);\n\tconst openHelpModal = () => {\n\t\tsetHelpIsOpen(true);\n\t}\n\n\tconst [successIsOpen, setSuccessIsOpen] = useState(false);\n\tconst openSuccessModal = () => {\n\t\tif (!canceledWin) { setSuccessIsOpen(true) }\n\t}\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Modal \n\t\t\t\tclassName=\"help_modal_content\"\n\t\t\t\toverlayClassName=\"help_modal_overlay\"\n\t\t\t\tisOpen={helpIsOpen} \n\t\t\t\tonRequestClose={()=>setHelpIsOpen(false)}\n\t\t\t>\n\t\t\t\t<div className=\"help_modal_header\">\n\t\t\t\t\t<div className=\"help_modal_header_text\">Help</div>\n\t\t\t\t\t<button className=\"help_modal_close\" onClick={()=>setHelpIsOpen(false)}>X</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"help_modal_text\">\n\t\t\t\t\tThe goal is to connect all of the dots, using all of the given paths. You're not allowed to reuse any paths. Click on any point to get started!<br /><br />\n\t\t\t\t\tPossible paths are highlighted orange, used paths are blue, and unavailable paths are black. <br />\n\t\t\t\t\t<ul> The 'New' button generates a new set of paths. </ul>\n\t\t\t\t\t<ul> The 'Reset' button resets the current puzzle to it's starting state. </ul>\n\t\t\t\t\t<ul> The slider is used to choose how many points you want on the graph. </ul><br />\n\t\t\t\t\tIf you're having any sizing issues, try refreshing the page.\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t\t<Modal\n\t\t\t\tclassName=\"success_modal_content\"\n\t\t\t\toverlayClassName=\"success_modal_overlay\"\n\t\t\t\tisOpen={successIsOpen}\n\t\t\t\tonRequestClose={()=> { canceledWin = true; setSuccessIsOpen(false);}}\n\t\t\t>\n\t\t\t\t<div className=\"maybe\">\n\t\t\t\t\t<div className=\"success_modal_top\">Success!</div>\n\t\t\t\t\t<div className=\"success_modal_question\">Start new puzzle?</div>\n\t\t\t\t\t<div className=\"success_modal_new\">\n\t\t\t\t\t\t<button className=\"success_modal_button\" onClick={() => {genGraph(); setSuccessIsOpen(false)}}>New Puzzle</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t\t<ControlBar genGraphFunc={genGraph} onNumVertChange={handleNumVertChange} softReset={softResetGraph} openHelp={(openHelpModal)}/>\n\t\t\t<div className=\"main_canvas\" onMouseMove={getMouseCoords} onClick={getCoordsOnClick}>\n\t\t\t\t<main className=\"canvas\">\n\t\t\t\t\t<Canvas draw={draw} graphData={getGraphData} setSuccess={openSuccessModal}/>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}